package main;

import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import org.apache.poi.xssf.usermodel.*;

public class ExcelDTR {
    
    ResultSet userData, timeData;
    boolean isUsed = true;
    int counter = 1;
    ToBase64 base = new ToBase64();
    
    public void ExcelDTR(Connection conn, int ID, String Date, String Month, int Year, String type) throws FileNotFoundException, IOException, SQLException, ParseException{
        //take user data and time data
        DBQueries query = new DBQueries();
        if(Date.length() == 1){
            Date = "0" + Date;
        }
        userData = query.getRow(conn, "*", "UserTable", "userid = " + ID );
        timeData = query.getRow(conn, "timeHistType, timeHistUT, DATE_FORMAT(timeHistin, '%d') as timeDay, DATE_FORMAT(timeHistIn, '%H:%i:%S') as timeHistIn, DATE_FORMAT(timeHistOut, '%H:%i:%S') as timeHistOut", "TimeHistoryTable", "DATE_FORMAT(timeHistIn, '%m-%Y') = '" + Date +  "-" + Year + "' AND userID = " + ID);
        
        String decode = "";
        byte[] decoded = Base64.getDecoder().decode(decode.getBytes());
        
        //Resets file back to start everytime
        File file = new File("resources\\documents\\DTR_" + ID + ".xlsx");
        file.setWritable(true);
        try (OutputStream stream = new FileOutputStream(file)) {
            stream.write(decoded);
        }
        
        FileInputStream inputStream = new FileInputStream("resources\\documents\\DTR_" + ID + ".xlsx");
        XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
        XSSFSheet sheet = workbook.getSheet("DTR");
        
        //Full Name
        XSSFRow row = sheet.getRow(3);
        XSSFCell cell = row.getCell(0);
        if(userData.next() != false){
            cell.setCellValue(userData.getString("userlastn") + ", " + userData.getString("userfirstn") + " " + userData.getString("usermiddlen"));
        }
        
        //Year and Month
        row = sheet.getRow(6);
        cell = row.getCell(0);
        cell.setCellValue("For the Month of: " + Month + " "+ Year);
        
        //Arrival and Departure
        row = sheet.getRow(7);
        cell = row.getCell(0);
        cell.setCellValue("Office Hours    Arrival A.M. " + userData.getString("userin") + "          P.M. " + userData.getString("userAftIn"));
        row = sheet.getRow(8);
        cell = row.getCell(0);
        cell.setCellValue("               Departure A.M." + userData.getString("userout") + "          P.M." + userData.getString("userAftOut"));
        
        //Time record
        
        for(int r = 11; r <= 41; r++){
            int undertime = 0;
            row = sheet.getRow(r);
            if(isUsed){
                if(timeData.next() != false){
                    r = dateRun(row, cell, sheet, r, undertime);
                }
            }else{
                r = dateRun(row, cell, sheet, r, undertime);
            }
            
        }
        
        
        //Write and Close
        FileOutputStream outputStream = new FileOutputStream(file);
        workbook.write(outputStream);
        inputStream.close();
        outputStream.close();
        if(type == "Emp"){
            file.setWritable(false);
        }else{
            file.setWritable(true);
        }
        Desktop.getDesktop().open(file);
    }
    
    protected int dateRun(XSSFRow row, XSSFCell cell, XSSFSheet sheet, int r, int undertime) throws SQLException, ParseException{
        while(timeData.getInt("timeDay") != counter){
            counter++;
            r++;
            row = sheet.getRow(r);
        }
        if(timeData.getInt("timeDay") == counter){
            if(timeData.getString("timeHistType").equals("Morning")){
                cell = row.getCell(1);
                cell.setCellValue(convertTime(timeData.getString("timeHistIn")));
                cell = row.getCell(2);
                cell.setCellValue(convertTime(timeData.getString("timeHistOut")));
                if(timeData.next() != false){
                    if(timeData.getInt("timeDay") == counter && timeData.getString("timeHistType").equals("Afternoon")){
                        cell = row.getCell(3);
                        cell.setCellValue(convertTime(timeData.getString("timeHistIn")));
                        cell = row.getCell(4);
                        cell.setCellValue(convertTime(timeData.getString("timeHistOut"))); 
                        counter++;
                        isUsed = true;
                    }else{
                        counter++;
                        isUsed = false;
                    }
                }else{
                    cell = row.getCell(5);
                    cell.setCellValue(undertime/60 + " mins" );
                    counter++;
                    isUsed = true;
                }
            }else{
                cell = row.getCell(3);
                cell.setCellValue(convertTime(timeData.getString("timeHistIn")));
                cell = row.getCell(4);
                cell.setCellValue(convertTime(timeData.getString("timeHistOut")));
                counter++;
                isUsed = true;
            }
        }
        return r;
    }
    
    private String convertTime(String time) throws ParseException{
        SimpleDateFormat militaryTime = new SimpleDateFormat("HH:mm");
        SimpleDateFormat standardTime = new SimpleDateFormat("hh:mm a");
        Date DT = militaryTime.parse(time);
        return standardTime.format(DT);
    }
    
}
